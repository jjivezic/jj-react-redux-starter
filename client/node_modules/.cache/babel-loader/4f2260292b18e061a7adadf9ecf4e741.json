{"ast":null,"code":"import axios from 'axios';\nimport { sessionService } from '../_sessionService/storage';\nimport { url } from '../environment';\naxios.interceptors.response.use(response => {\n  // Returns response body\n  return response.data;\n}, async error => {\n  // Handle response error\n  _handleError(error);\n\n  return Promise.reject(error); // }\n});\n\nconst refreshToken = async err => {\n  let response = await apiRequest('get', 'user/token/refreshToken');\n\n  if (response) {\n    sessionService.updateUser(response);\n    let cutUrl = getRoute(err.config.url, '/', 3);\n    let url = err.config.url.slice(cutUrl + 1);\n    let data = err.config.data ? JSON.parse(err.config.data) : null;\n    return await apiRequest(err.config.method, url, data);\n  } else {\n    _handleError(err);\n  }\n};\n\nconst getRoute = (string, subString, index) => {\n  return string.split(subString, index).join(subString).length;\n};\n\nconst apiRequest = async (method, apiUrl, body, headers) => {\n  try {\n    const apiToken = sessionService.getSessionToken();\n    const refreshToken = sessionService.getSessionRefreshToken();\n    const requestHeaders = !headers ? {} : headers;\n    if (apiToken) requestHeaders['x-access-token'] = apiToken;\n    if (refreshToken) requestHeaders['x-refresh-access-token'] = refreshToken;\n    if (method === 'get' || method === 'delete') return axios[method](url + apiUrl, {\n      headers: requestHeaders\n    });else if (method === 'post' || method === 'put' || method === 'patch') return axios[method](url + apiUrl, body, {\n      headers: requestHeaders\n    });\n  } catch (err) {\n    _handleError(err);\n  }\n};\n\nconst outsideRequest = async (method, url, body, headers) => {\n  try {\n    const requestHeaders = !headers ? {} : headers;\n    if (method === 'get' || method === 'delete') return axios[method](url, {\n      headers: requestHeaders\n    });else if (method === 'post' || method === 'put') return axios[method](url, body, {\n      headers\n    });\n  } catch (err) {\n    _handleError(err);\n  }\n};\n\nconst _handleError = async err => {\n  if (err && err.response) {\n    if (err.response.status === 403) {\n      sessionService.destroy();\n      window.location.replace('/');\n    }\n\n    let errorText;\n\n    if (err.response.data && err.response.data.error && err.response.data.error.message) {\n      errorText = err.response.data.error.message;\n    } else {\n      errorText = err.response.statusText;\n    } // ToastService.show('error', errorText)\n\n  }\n\n  return err;\n};\n\nexport default {\n  apiRequest,\n  outsideRequest\n};","map":{"version":3,"sources":["/home/petar/Desktop/react-redux-boilerplate/react-redux-starter/client/src/_services/http.service.js"],"names":["axios","sessionService","url","interceptors","response","use","data","error","_handleError","Promise","reject","refreshToken","err","apiRequest","updateUser","cutUrl","getRoute","config","slice","JSON","parse","method","string","subString","index","split","join","length","apiUrl","body","headers","apiToken","getSessionToken","getSessionRefreshToken","requestHeaders","outsideRequest","status","destroy","window","location","replace","errorText","message","statusText"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { sessionService } from '../_sessionService/storage';\nimport { url } from '../environment';\n\naxios.interceptors.response.use((response) => {\n    // Returns response body\n    return response.data\n}, async (error) => {\n    // Handle response error\n    _handleError(error)\n    return Promise.reject(error)\n    // }\n})\nconst refreshToken = async (err) => {\n    let response = await apiRequest('get', 'user/token/refreshToken');\n    if (response) {\n        sessionService.updateUser(response);\n        let cutUrl = getRoute(err.config.url, '/', 3);\n        let url = err.config.url.slice(cutUrl + 1);\n        let data = (err.config.data ? JSON.parse(err.config.data) : null)\n        return await apiRequest(err.config.method, url, data);\n    } else {\n        _handleError(err);\n    }\n}\n\nconst getRoute = (string, subString, index) => {\n    return string.split(subString, index).join(subString).length;\n}\nconst apiRequest = async (method, apiUrl, body, headers) => {\n    try {\n        const apiToken = sessionService.getSessionToken()\n        const refreshToken = sessionService.getSessionRefreshToken()\n        const requestHeaders = (!headers) ? {} : headers\n        if (apiToken) requestHeaders['x-access-token'] = apiToken;\n        if (refreshToken) requestHeaders['x-refresh-access-token'] = refreshToken;\n        if (method === 'get' || method === 'delete') return axios[method](url + apiUrl, { headers: requestHeaders })\n        else if (method === 'post' || method === 'put' || method === 'patch') return axios[method](url + apiUrl, body, { headers: requestHeaders })\n    } catch (err) {\n        _handleError(err)\n    }\n}\n\nconst outsideRequest = async (method, url, body, headers) => {\n    try {\n        const requestHeaders = (!headers) ? {} : headers\n        if (method === 'get' || method === 'delete') return axios[method](url, { headers: requestHeaders })\n        else if (method === 'post' || method === 'put') return axios[method](url, body, { headers })\n    } catch (err) {\n        _handleError(err)\n    }\n}\n\nconst _handleError = async (err) => {\n    if (err && err.response) {\n        if (err.response.status === 403) {\n            sessionService.destroy();\n            window.location.replace('/');\n        }\n        let errorText;\n        if (err.response.data && err.response.data.error && err.response.data.error.message) {\n            errorText = err.response.data.error.message\n        } else {\n            errorText = err.response.statusText\n        }\n        // ToastService.show('error', errorText)\n    }\n\n    return err;\n}\n\nexport default {\n    apiRequest,\n    outsideRequest\n}"]},"metadata":{},"sourceType":"module"}